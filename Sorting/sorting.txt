//Types of sorting-->>

1.Selection sort
2.Bubble sort
3.

//Selection sort-->>

Step 1. select minimum and swap  || swap happen 0 to minimum element
step 2. select minimum again and swap it. || swap happen 1 to minimum element
...
...
...
step 6. if there only one elements remain the array will sorted.. || no swap because only one elements left so
                                                                     array already sorted


//Psuedo code-->>

for(i = 0; i<n-2;i++){
    mini = i
    for(j=i;j<n-i;j++){
        if(arr[j]<arr[mini]) mini=j
    }

    swap(arr[mini],arr[i])
}

//How to swap any number in cpp-->>

first store the no. in temp then swap 
eg. wanna swap two no. arr[i] and arr[mini]
take arr[mini] as temp = arr[mini] then

swap arr[mini] no. to arr[i] and arr[i] to temp its swapped now..

// Time complexity of selection sort-->>

n+n-1+n-2+n-3.....+2+1 n*(n+1)/2 -->> o(n^2) is time complexity


//Bubble sort-->>

//bubble sort time complexity is similar to selection sort time complexity n+n-1+n-2+n-3+n-4+....n
                                                                           n*(n+1)/2-->> n^2 -- o(n^2) worst or avg

Best time complexity of bubble short -- o(n)                                                                          


//Insertion sort-->>

      


//Quick Sort-->>

1.Pick as pivot and place in the order of indexing... Then devided them into smaller and greater and then again apply same concpet in the smaller and 
  greater pick pivot then devided them into two parts smalle and greater..
Pivot can any element in the array...
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.


//Merge sort-->> (Devided & Merge) -->> This also called devided and conquar method

Deviding the array into two parts then again devided both of the array into two parts reapeat the same steps util the only one element in each array
then merge them in sorted way....



//Psuedo code -->>

mergeSort(arr,low,high){
  if(low>=high) return;
  mid = (mid+high)/2;
  mergeSort(arr,low,mid);
  mergeSort(arr,mid+1,high);
  merge(arr,low,mid,high);

}


//Merge psuedo code-->


merge(arr,low,mid,high){
  temp=[];
  left=low;
  right=mid+1;
  while(left<=mid+1 && right<=high){
    if(arr[left]<=arr[right]){
      temp.add(arr[left]);
      left++;
    }
    else{
      temp.add(arr[right]);
      right++;
    }

  }
  while(left<=mid){
    temp.add(arr[left]);
    left++;
  }
  while(right<=high){
    temp.add(arr[right]);
    right++;
  }

}

//Place into the single array..

for(i=low;i<high;i++){
  arr[i]=temp[i-low];
}







